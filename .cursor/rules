# üß© Cursor Prompt Template: Next.js + Mantine 7

Use this prompt to instruct Cursor IDE to generate components, layouts, or utilities for your prototypes based on a consistent tech stack.

---

## üîß Tech Stack Baseline

- **Next.js v14+** using the **App Router**
- **Mantine v7** for UI and styling
- **TypeScript**

---

## üìê Development Guidelines

- Use **server** and **client components** appropriately.
- Style only with **Mantine**:
  - `@mantine/core`
  - `@mantine/hooks`
  - `@mantine/notifications`, etc.
- Leverage **Mantine theming** for colors, spacing, and typography.
- Do **not** use Tailwind CSS, CSS modules, or other styling libraries unless explicitly requested.
- Prioritize **composability** and **readable functional components**.

---

## üé® Design System Component Requirements

**ALWAYS use Design System components** when available instead of raw Mantine components:

**Design System Location:** `@/components/DesignSystem`

**Available Categories:**
- **Buttons** - Button, ActionButton, CloseButton
- **Inputs** - TextInput, TextArea, NumberInput, ColorInput, Slider, Switch, SegmentedControl, Checkbox, Radio, RadioGroup
- **Combobox** - SearchableSelect, AutocompleteClearable, Multiselect
- **Navigation** - Breadcrumb, BackBreadcrumb, NavLink, Stepper, Tabs
- **DataDisplay** - Alert, Badge, Chip, Pill, Indicator, Progress
- **Overlays** - Drawer, Menu
- **Typography** - Kbd
- **Feedback** - (Future components)
- **Misc** - (Future components)

**Usage Pattern:**
```tsx
// ‚úÖ CORRECT - Use Design System components
import { Button, TextInput, Alert, Menu, Kbd } from '@/components/DesignSystem';

// ‚ùå INCORRECT - Don't use raw Mantine components directly
import { Button, TextInput, Alert, Menu, Kbd } from '@mantine/core';
```

**Design System Rules:**
1. **Always check Design System first** - Before using any Mantine component, check if a Design System wrapper exists
2. **Create new Design System components** - If a Mantine component isn't wrapped yet, create a new Design System component following established patterns:
   - Use `forwardRef` for DOM element references
   - Extend Mantine props with `interface DS[ComponentName]Props`
   - Add comprehensive JSDoc documentation with examples
   - Follow t-shirt sizing (xs, sm, md, lg, xl) where applicable
   - Use semantic color systems (success, danger, info, pending, default)
   - Place in appropriate category directory
   - Export through category index and main Design System index
3. **Maintain consistency** - Follow the established patterns seen in existing Design System components
4. **Organize by category** - Group related components in logical categories (Buttons, Inputs, etc.)

**Component Structure Template:**
```tsx
import React, { forwardRef } from 'react';
import { [MantineComponent] as Mantine[Component], [MantineComponent]Props as Mantine[Component]Props } from '@mantine/core';

export interface DS[Component]Props extends Mantine[Component]Props {
  // Enhanced props here
}

/**
 * AppDirect Design System [Component] Component
 * 
 * [Description and usage examples]
 */
export const [Component] = forwardRef<HTML[Element]Element, DS[Component]Props>(
  ({ ...props }, ref) => {
    return (
      <Mantine[Component]
        ref={ref}
        {...props}
      />
    );
  }
);

[Component].displayName = '[Component]';
```

**Do NOT use:**
- Raw Mantine components when Design System wrappers exist
- Inconsistent prop naming or sizing conventions
- Direct styling overrides that bypass the Design System

---

## üìä Data Table Requirements

**ALWAYS use the custom Table component** for any data display requests, including synonyms:
- "table", "data table", "datatable"
- "grid", "data grid" 
- "list", "list view", "data list"
- "spreadsheet", "sheet"
- "records", "data display"

**Custom Table Component Location:** `@/components/DesignSystem`

**Features included:**
- Advanced filtering and search
- Column sorting and visibility controls
- Row selection with bulk actions
- Pagination with cursor support
- Loading states and error handling
- Responsive design
- Accessibility compliance

**Usage Pattern:**
```tsx
import { Table } from '@/components/DesignSystem';

<Table<DataType>
  data={data}
  columns={columnDefs}
  totalCount={totalRecords}
  onRowSelectionChange={handleSelection}
  onPaginationChange={handlePagination}
  filtersState={filters}
  onFiltersChange={setFilters}
/>
```

**Do NOT use:**
- Basic Mantine `Table` components
- Custom table implementations
- Third-party table libraries

---

## üìÑ Page Content Header Requirements

**ALWAYS use the custom PageContentHeader component** for page header sections, including synonyms:
- "page header", "content header", "section header"
- "hero section", "page banner"
- "info panel", "summary section"
- "header card", "title section"

**Custom Component Location:** `@/components/DesignSystem`

**Features included:**
- Icon with customizable colors and sizes (58x58px ThemeIcon)
- Title with optional badge and edit functionality
- Kebab menu for additional actions
- Action buttons row
- **4 mutually exclusive content sections:**
  1. **Key Insights** - Metrics display with large numbers
  2. **Description** - Text content with optional title and links
  3. **Name Value Pairs** - Structured data in grid layout
  4. **Drawer** - Collapsible content with "View More" functionality

**Usage Pattern:**
```tsx
import { PageContentHeader } from '@/components/DesignSystem';

<PageContentHeader
  title="Page Title"
  badge="BADGE"
  icon={<IconComponent />}
  editable={true}
  onEdit={handleEdit}
  actions={[
    { label: "Action One", onClick: handleAction1 },
    { label: "Action Two", onClick: handleAction2 }
  ]}
  contentSection="insights"
  insights={[
    { value: "150", title: "Total Users", color: "blue" },
    { value: "23", title: "Active Sessions" }
  ]}
/>
```

**Do NOT use:**
- Custom header implementations
- Basic Mantine Paper/Group combinations
- Third-party header components

---

## üìù Prompt Template

> You are assisting with prototyping a web application using the following tech stack:
>
> - Next.js v14+ (App Router)
> - Mantine v7
> - TypeScript
>
> Use server/client components appropriately. Style exclusively with Mantine. Use Mantine theming where applicable. Avoid other UI libraries unless explicitly asked.
>
> **For all UI components, prioritize using the Design System components from `@/components/DesignSystem` before raw Mantine components.**
>
> **Task:**  
> Generate a [component / layout / page / utility] that does the following:
>
> **[INSERT YOUR FEATURE OR REQUIREMENTS HERE]**
>
> Include all necessary hooks, context providers, and utility functions needed. Keep the output modular and clean.

---

## ‚úÖ Example Prompt

> Generate a **dashboard page** that includes:
> - a sidebar with icons and labels  
> - a top navbar with user avatar and dropdown  
> - a main content area that fetches and displays a list of customer quotes from a mocked API  
